import numpy as np

# Визначення матриць для аналізу. Кожна матриця представляє попарні порівняння альтернатив,
# які експерти оцінили для визначення пріоритетів.
A1 = np.array([[1, 2, 4, 5],
               [1 / 2, 1, 2, 3],
               [1 / 4, 1 / 2, 1, 4],
               [1 / 5, 1 / 3, 1 / 4, 1]])

A2 = np.array([[1, 1, 2, 5],
               [1, 1, 3, 1],
               [1 / 2, 1 / 3, 1, 3],
               [1 / 5, 1, 1 / 3, 1]])

A3 = np.array([[1, 3, 4, 2],
               [1 / 3, 1, 4, 2],
               [1 / 4, 1 / 4, 1, 2],
               [1 / 2, 1 / 2, 1 / 2, 1]])

A4 = np.array([[1, 1 / 2, 1 / 3, 1 / 2],
               [2, 1, 1 / 2, 1 / 3],
               [3, 2, 1, 1 / 4],
               [2, 3, 4, 1]])

A5 = np.array([[1, 1, 1 / 2, 5],
               [1, 1, 1 / 3, 1],
               [2, 3, 1, 1 / 2],
               [1 / 5, 1, 2, 1]])

A6 = np.array([[1, 1 / 2, 1 / 4, 1 / 2],
               [2, 1, 1 / 3, 1 / 2],
               [4, 3, 1, 1 / 2],
               [2, 2, 2, 1]])

# Створюємо список матриць для подальшого опрацювання. Це дозволить
# циклічно обробляти їх за допомогою методів лінійної алгебри.
matrices = [A1, A2, A3, A4, A5, A6]


# Функція для обчислення вектору пріоритетів для кожної матриці.
# Метод використовує власні вектори матриць для визначення відносної ваги альтернатив.
def priority_vector(matrix):
    eigenvalues, eigenvectors = np.linalg.eig(matrix)  # Обчислення власних значень та векторів матриці
    max_eigenvalue = np.max(eigenvalues)  # Визначення максимального власного значення
    max_eigenvector = np.real(eigenvectors[:, np.argmax(eigenvalues)])  # Відповідний йому власний вектор
    priority = max_eigenvector / np.sum(max_eigenvector)  # Нормалізація власного вектору для отримання ваг
    return priority


# Обчислюємо вектори пріоритетів для кожної з матриць попарних порівнянь.
# Вектори показують, наскільки важливою є кожна альтернатива у відношенні до інших.
priority_vectors = [priority_vector(matrix) for matrix in matrices]

# Виведення векторів пріоритетів для кожної матриці.
# Вектори пріоритетів надають інформацію про відносну вагу кожної альтернативи в системі.
for i, priority in enumerate(priority_vectors):
    print(f"Priority vector for A{i + 1}: {priority}")
